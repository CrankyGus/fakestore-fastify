// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// model CategoriesOnProduct {
//   product       Products     @relation(fields: [productId], references: [id])
//   productId     Int // relation scalar field (used in the `@relation` attribute above)
//   category   Categories @relation(fields: [categoryId], references: [id])
//   categoryId Int // relation scalar field (used in the `@relation` attribute above)
//   assignedAt DateTime @default(now())
//   assignedBy String

//   @@id([productId, categoryId])
// }

model Categories {
  id                   Int        @id @default(autoincrement())
  category_title       String
  category_description String?
  products             Products[]
}

model Products {
  id                  Int           @id @default(autoincrement())
  product_title       String
  product_category    Categories[]
  product_brand       Brand         @relation(fields: [product_brandId], references: [id])
  product_brandId     Int
  product_description String?
  product_image       String?
  stock               Int           @default(0)
  price               Int           @default(0)
  discontinued        Boolean
  createAt            DateTime      @default(now())
  updateAt            DateTime      @updatedAt
  OrderDetail         OrderDetail[]
}

model Brand {
  id          Int        @id @default(autoincrement())
  brand_title String
  products    Products[]
}

model User {
  id           Int      @id @default(autoincrement())
  firstname    String
  lastname     String
  email        String   @unique
  hashpassword String
  address      String
  city         String
  postal_code  Int
  country      String
  phone        String
  isAdmin      Boolean  @default(false)
  orders       Order[]
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
}

model Order {
  id          Int          @id @default(autoincrement())
  users       User         @relation(fields: [userId], references: [id])
  userId      Int
  status      String       @default("PENDING")
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  orderDetail OrderDetail?
}

model OrderDetail {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  products  Products @relation(fields: [productId], references: [id])
  orderId   Int      @unique
  productId Int
  discount  Int      @default(0)
  quantity  Int
}
